<chapter id="taglib">
    <title>Tag Libraries</title>
    
    <sect1 id="taglib-use">
        <title>Using Tags</title>
        <sect2 id="taglib-use-normal">
			<title>Tag Namespaces</title>
			<para>
				Facelets uses valid XML with namespace support for compilation.  If you are new to XML, there are great resources online, such as http://www.w3schools.com.  To use a library of tags, you would 'include' the library by declaring a namespace.  Declaring a namespace involves using the library's URI (or URL) and mapping it to a prefix.
			</para>
			<programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html">
      
<body>
  <h:inputText value="#{hello.world}"/>
</body>

</html>]]></programlisting>
		<para>
			In the example above, we've declared 2 namespaces:
		</para>
		<itemizedlist>
			<listitem>
				<para><literal>xmlns="http://www.w3.org/1999/xhtml"</literal> Says every tag without a prefix, such as <literal><![CDATA[<body>]]></literal>, are part of XHTML.</para>
			</listitem>
			<listitem>
				<para><literal>xmlns:h="http://java.sun.com/jsf/html"</literal> Maps the prefix <literal>h:</literal> to the JSF HTML library.</para>
			</listitem>
		</itemizedlist>
        </sect2>
        <sect2 id="taglib-use-jsfc">
			<title>Using 'jsfc'</title>
			<para>
				Facelets provides you the ability to have one XML element in the page be converted to another at compile time by specifying the <literal>jsfc</literal> attribute.
			</para>
			<programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html">
      
<body>
  <input type="text" jsfc="h:inputText" value="#{hello.world}" />
</body>

</html>]]></programlisting>
			<para>
				The <literal><![CDATA[<input>]]></literal> tag above is readable/displayable in browsers and visual tools as a normal text field.  It would be nice to use that same text field in JavaServer Faces, so we provide the <literal>jsfc="h:inputText"</literal>.  This declaration tells the compiler to resolve the <literal><![CDATA[<input>]]></literal> tag as an <literal><![CDATA[<h:inputText>]]></literal> (the same as above).  Note, the same rules for namespaces and naming apply to the value of the <literal>jsfc</literal> attribute.
			</para>
        </sect2>
        <sect2 id="taglib-use-unresolved">
			<title>Unresolved Namespaces</title>
			<para>
				Any namespace that is unresolved and/or the tag's name is not found in any library, then it is treated as regular text.  If your tag or component isn't showing up in your rendered page, check the source of page and see if the tag was simply ignored.  This usually means you either misspelled the tag's name or you are using the wrong namespace for your library.
			</para>
        </sect2>
	</sect1>
    
    <sect1 id="taglib-available">
        <title>Available Tag Libraries</title>
        
        <sect2 id="taglib-available-spec">
			<title>JavaServer Faces Specification</title>
			<para>
				Facelets comes with support for all tags (components) included in the JavaServer Faces Specification.  Great care was taken to mimic the specification's JSP tag counterparts to leverage existing knowledge and available documentation.  For development, you may reference the 'Tag Library Documentation' at:
			</para>
			<itemizedlist>
				<listitem>http://java.sun.com/j2ee/javaserverfaces/reference/api/index.html</listitem>
			</itemizedlist>
			<table>
				<title>Specification Tag Libraries</title>
				<tgroup cols="2">
					<thead>
						<row>
							<entry>Namespace</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>http://java.sun.com/jsf/core</entry>
							<entry>The core JavaServer Faces custom actions that are independent of any RenderKit used.</entry>
						</row>
						<row>
							<entry>http://java.sun.com/jsf/html</entry>
							<entry>This tag library contains JavaServer Faces component tags for all UIComponent + HTML RenderKit Renderer combinations defined in the JavaServer Faces Specification.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		  </sect2>
		  
		  <sect2 id="taglib-available-jstl">
			<title>JSTL Support</title>
			<para>
				TODO (limited)
			</para>
		  </sect2>
		  
		  <sect2 id="taglib-available-adf">
			<title>Oracle ADF Faces</title>
			<para>
				TODO
			</para>
		  </sect2>
		  
	</sect1>
	
	<sect1 id="taglib-function">
		<title>Functions</title>
		<para>
			As part of the EL Specification, you can incorporate <literal>static</literal> Java methods into your documents.  The JSTL library already has some of these functions available, see <xref linkend="taglib-available-jstl"/>.
		</para>
		<para>
			Functions are declared within EL in the following format: <literal>#{fn:sizeOf(myCollection)}</literal>.  What that line says is to reference the tag library using the prefix <literal>fn</literal> for a function named <literal>sizeOf</literal>.  This syntax should feel similar to what's required for using tags from imported libraries.
		</para>
		<para>
			Any tag library can offer any amount of functions.  Please reference the particular library's documentation for function names and parameters information.
		</para>
	</sect1>
    
    <sect1 id="taglib-web">
		<title>Loading Libraries</title>
		<para>
			Tag libraries can be loaded multiple ways.  First Facelets will load all libraries from your classpath (including packaged Jars) and then any libraries you have specified in your <literal>web.xml</literal>.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					When Facelets searches the classpath, it will attempt to load any file with the extension <literal>*.taglib.xml</literal> from the <literal>/meta-inf</literal> folder of your Jars.  For example, <literal>/meta-inf/mycompany.taglib.xml</literal> would be found by Facelets while <literal>/mycompany.taglib.xml</literal> and <literal>/meta-inf/mycompany.xml</literal> would not.  See <xref linkend="config-logging"/> for information on recieving debug information on the libraries loaded.
				</para>
			</listitem>
			<listitem>
				<para>
					Facelets will check for an initialization parameter from your <literal>web.xml</literal> and load all libraries specified there relative to your application's root. See <xref linkend="config-webapp-init"/> for details on the parameter.  This is an ideal way to declare specialized tags for a particular application, tags that aren't necessarily distributed with code in Jars.
				</para>
			</listitem>
		</itemizedlist>
	</sect1>
	
	<sect1 id="taglib-create">
        <title>Creating Tag Libraries</title>
        
        <preface id="taglib-create-overview">
			<title>Overview</title>
			<para>
				TODO
			</para>
        </preface>
        
        <sect2 id="taglib-create-schema">
			<title>Tag Library Schema</title>
        </sect2>
        
        <sect2 id="taglib-create-component">
			<title>UIComponents</title>
        </sect2>
        
        <sect2 id="taglib-create-validator">
			<title>Validators</title>
        </sect2>
        
        <sect2 id="taglib-create-converter">
			<title>Converters</title>
        </sect2>
        
        <sect2 id="taglib-create-custom">
			<title>Custom Tags</title>
        </sect2>
        
	</sect1>
	
</chapter>


